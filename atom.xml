<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sharef</title>
  
  <subtitle>的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.sharef.top/"/>
  <updated>2020-05-15T05:53:17.305Z</updated>
  <id>https://blog.sharef.top/</id>
  
  <author>
    <name>shijf</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何利用 VSCode 打造一个 java 的开发环境</title>
    <link href="https://blog.sharef.top/2020/05/15/30e42f40-9667-11ea-a46f-b77762f93269/"/>
    <id>https://blog.sharef.top/2020/05/15/30e42f40-9667-11ea-a46f-b77762f93269/</id>
    <published>2020-05-15T04:47:33.000Z</published>
    <updated>2020-05-15T05:53:17.305Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装-Java-环境"><a href="#安装-Java-环境" class="headerlink" title="安装 Java 环境"></a>安装 Java 环境</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="概念理解："><a href="#概念理解：" class="headerlink" title="概念理解："></a>概念理解：</h3><ul><li><p>J2SE 标准版</p></li><li><p>J2EE 企业版</p></li><li><p>J2ME 用于移动设备、嵌入式设备</p><h3 id="JRE、JDK、JVM之间的区别与联系"><a href="#JRE、JDK、JVM之间的区别与联系" class="headerlink" title="JRE、JDK、JVM之间的区别与联系"></a>JRE、JDK、JVM之间的区别与联系</h3></li><li><p>JVM ：英文名称（Java Virtual Machine），就是我们耳熟能详的 Java 虚拟机。它只认识 xxx.class 这种类型的文件，它能够将 class 文件中的字节码指令进行识别并调用操作系统向上的 API 完成动作。所以说，jvm 是 Java 能够跨平台的核心，具体的下文会详细说明。</p></li><li><p>JRE ：英文名称（Java Runtime Environment），我们叫它：Java 运行时环境。它主要包含两个部分，jvm 的标准实现和 Java 的一些基本类库。它相对于 jvm 来说，多出来的是一部分的 Java 类库。</p></li><li><p>JDK ：英文名称（Java Development Kit），Java 开发工具包。jdk 是整个 Java 开发的核心，它集成了 jre 和一些好用的小工具。例如：javac.exe，java.exe，jar.exe 等。</p></li></ul><p>显然，这三者的关系是：一层层的嵌套关系。JDK&gt;JRE&gt;JVM</p><a id="more"></a><h2 id="Linux-安装-Java-环境"><a href="#Linux-安装-Java-环境" class="headerlink" title="Linux 安装 Java 环境"></a>Linux 安装 Java 环境</h2><p>此处需要结合上一篇 <a href="https://blog.sharef.top/2020/02/21/66b0ce80-95f9-11ea-926e-6f56d5e2c488/">《在win 10 环境下 如何打造一套适合的开发环境》</a>，将ubuntu 设置为 主要的开发、运行环境。</p><ul><li>官网地址：<a href="https://www.oracle.com/downloads/#category-java" target="_blank" rel="noopener">https://www.oracle.com/downloads/#category-java</a> （2020/03/30版，可能链接会变化）</li><li>找到 Java -&gt; Java (JDK) for Developers 点击，目前地址 ：<a href="https://www.oracle.com/java/technologies/javase-downloads.html" target="_blank" rel="noopener">https://www.oracle.com/java/technologies/javase-downloads.html</a></li><li>这里采用  Linux Compressed Archive ，下载地址：<a href="https://download.oracle.com/otn-pub/java/jdk/14+36/076bab302c7b4508975440c56f6cc26a/jdk-14_linux-x64_bin.tar.gz" target="_blank" rel="noopener">https://download.oracle.com/otn-pub/java/jdk/14+36/076bab302c7b4508975440c56f6cc26a/jdk-14_linux-x64_bin.tar.gz</a> 下载太慢，尝试使用迅雷等工具，如果链接地址有 auth 字样的参数，请删除</li></ul><p>以下是在 linux 环境中安装, 用 <code>$</code> 来注明</p><pre><code class="shell">// 新建目录$ sudo mkdir /url/local -p soft/java// 将软件包移动到新建的目录$ sudo mv ./jdk-14_linux-x64_bin.tar.gz /url/local/soft/java// 移动到 java 目录下$ cd /url/local/soft/java// 解压$ sudo tar -zxvf jdk-14_linux-x64_bin.tar.gz// `ls` 查看发现，没有jre目录，此时需要手动安装一下$ sudo cd jdk-14/bin &amp;&amp; ./jlink.exe --module-path jmods --add-modules java.desktop --output jre// 设置环境变量$ sudo vim /etc/profile// 在文件末尾添加以下代码</code></pre><pre><code class="shell">// /etc/profileset java environmentJAVA_HOME=/usr/local/soft/java/jdk-14        JRE_HOME=/usr/local/soft/java/jdk-14/jre     CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/libPATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/binexport JAVA_HOME JRE_HOME CLASS_PATH PATH</code></pre><pre><code class="shell">// 刷新终端区域，使配置生效。$ sudo source /etc/profile// 测试$ java -version</code></pre><p>打印出 java 版本信息，则说明 JDK 安装成功</p><p><strong>注意，如果你在 <code>wsl</code>，可能需要重启 linux 子系统，简单除暴，重启下电脑</strong></p><h1 id="安装-maven-并配置-阿里源"><a href="#安装-maven-并配置-阿里源" class="headerlink" title="安装 maven 并配置 阿里源"></a>安装 maven 并配置 阿里源</h1><ul><li>官网地址：<a href="https://maven.apache.org/download.cgi" target="_blank" rel="noopener">https://maven.apache.org/download.cgi</a></li><li>国内加速地址：<a href="http://mirror.bit.edu.cn/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz" target="_blank" rel="noopener">http://mirror.bit.edu.cn/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz</a></li></ul><pre><code class="shell">// 新建目录$ sudo mkdir /url/local/soft/maven // 移动到新建好的目录$ cd /url/local/soft/maven // 下载安装包$ sudo wget http://mirror.bit.edu.cn/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz// 解压$ sudo tar zvxf apache-maven-3.6.3-bin.tar.gz// 测试安装包, 如果可以打印出版本信息，则下载、解压没有问题$ sudo cd apache-maven-3.6.3 &amp;&amp; ./bin/mvn -v </code></pre><pre><code class="shell">// 设置环境变量$ sudo vim /etc/profile// 在文件结尾添加以下配置信息export MAVEN_HOME=/url/local/soft/maven/apache-maven-3.6.3export PATH=$MAVEN_HOME/bin:$PATH// 保存并source profile$ sudo source /ect/profile// 测试环境变量$ mvn -v</code></pre><p>打印出 maven  版本信息，则说明 maven 安装成功<br><strong>注意，如果你在 <code>wsl</code>，可能需要重启 linux 子系统，简单除暴，重启下电脑</strong></p><ul><li>配置国内 阿里 镜像 源，或者是 私有库地址加速</li></ul><pre><code class="shell"> &lt;mirror&gt;      &lt;id&gt;alimaven&lt;/id&gt;      &lt;name&gt;aliyun maven&lt;/name&gt;      &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;       &lt;/mirror&gt;</code></pre><p>首先，编辑文件 <code>/url/local/soft/maven/apache-maven-3.6.3/conf/settings.xml</code>，将上述的配置信息添加到 mirrors（镜像）节点。<br>然后，重启 vs code，即可生效。</p><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul><li>java 或者 jdk 安装路径 <code>/usr/local/soft/java/jdk-14</code></li><li>maven 安装路径 <code>/usr/local/soft/maven/apache-maven-3.6.3</code></li></ul><p>可能每个人 安装的 路径 不太相同，除非是按着以上步骤来的，不过不要紧，可以通过<br><code>which mvn</code> 和 <code>which java</code> 分别来查看 当前系统安装的 maven 和 java 的路径<br>比如我查到的路径分别为：</p><ul><li><code>/usr/local/soft/maven/apache-maven-3.6.3/bin/mvn</code></li><li><code>/usr/local/soft/java/jdk-14/bin/java</code></li></ul><p>So easy, too happy !</p><h1 id="安装扩展包"><a href="#安装扩展包" class="headerlink" title="安装扩展包"></a>安装扩展包</h1><ul><li><ol><li>搜索并安装  java Extension Pack </li></ol></li><li><ol start="2"><li>搜索并安装 Spring Boot Extension Pack</li></ol></li><li><ol start="3"><li>重启编辑器</li></ol><p>以上两个扩展已关联java项目开发主要使用的maven、springboot等所需要的扩展。</p></li></ul><h1 id="配置-maven、java-扩展包"><a href="#配置-maven、java-扩展包" class="headerlink" title="配置 maven、java 扩展包"></a>配置 maven、java 扩展包</h1><p>点左下角的设置图标-&gt;设置</p><pre><code class="json">// settings.json{    &quot;java.home&quot;: &quot;/usr/local/soft/java/jdk-14&quot;,    &quot;java.configuration.maven.userSettings&quot;: &quot;/url/local/soft/maven/apache-maven-3.6.3/conf/settings.xml&quot;,    &quot;maven.executable.path&quot;: &quot;/usr/local/soft/maven/apache-maven-3.6.3/bin/mvn&quot;,    &quot;maven.terminal.useJavaHome&quot;: true,    &quot;maven.terminal.customEnv&quot;: [        {            &quot;environmentVariable&quot;: &quot;JAVA_HOME&quot;,            &quot;value&quot;: &quot;/usr/local/soft/java/jdk-14&quot;        }    ]}</code></pre><p>主要的配置信息，如上。</p><h1 id="创建一个-Spring-Boot-项目"><a href="#创建一个-Spring-Boot-项目" class="headerlink" title="创建一个 Spring Boot 项目"></a>创建一个 Spring Boot 项目</h1><blockquote><p>输入Ctrl + Shift + P 打开命令面板，按照以下步骤填写相应内容即可：</p><ol><li>输入Spring，选择maven类型工程</li><li>选择工程的语言：java</li><li>填写工程的Group Id：com.test</li><li>填写工程的ArtifactId：demo</li><li>选择springboot版本：2.0.5</li><li>搜索添加你需要的依赖库，鼠标单击可勾选，这里只添加以下几个：<br>DevTools（代码修改热更新，无需重启）、Web（集成tomcat、SpringMVC）、Lombok（智能&gt; 生成setter、getter、toString等接口，无需手动生成，代码更简介）</li><li>选定依赖库后回车，然后选择一个目录用于初始化工程文件，最后会提示是否打开工程目录，点”open it”，或者自己手动从编辑器左侧的文件-打开文件夹-选定刚才这个目录即可。</li></ol></blockquote><h1 id="配置运行环境"><a href="#配置运行环境" class="headerlink" title="配置运行环境"></a>配置运行环境</h1><p>启动工程之前还需要配置下运行环境，点左边的小虫子图标，然后点上面的下拉箭头，选择添加配置，VS Code会自动为我们创建启动配置，我们只要修改mainClass就好了，配置示例如下：</p><pre><code class="json">{    // 使用 IntelliSense 了解相关属性。     // 悬停以查看现有属性的描述。    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387    &quot;version&quot;: &quot;0.2.0&quot;,    &quot;configurations&quot;: [        {            &quot;type&quot;: &quot;java&quot;,            &quot;name&quot;: &quot;CodeLens (Launch) - DemoApplication&quot;,            &quot;request&quot;: &quot;launch&quot;,            &quot;mainClass&quot;: &quot;com.example.demo.DemoApplication&quot;,            &quot;projectName&quot;: &quot;demo&quot;        }    ]}</code></pre><p>按F5或者点 DemoApplication.java 的 run 按钮启动，此时在命令行可知tomcat服务已经启动，端口号是8080，访问路径根目录为空。</p><p>在浏览器访问 <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a><br>提示如下错误：</p><hr><p><strong>Whitelabel Error Page</strong><br>This application has no explicit mapping for /error, so you are seeing this as a fallback.</p><p>Mon Mar 30 19:41:47 CST 2020<br>There was an unexpected error (type=Not Found, status=404).<br>No message available</p><hr><p>这说明我们的服务确实启动可用了，但是访问出这个错误，是因为我们没有定义服务器访问这个根路径对应的应答接口导致的。我们在 demo 包下面新建个 controller 包，然后新建个 HomeController.java 文件，内容如下：</p><pre><code class="java">package com.example.demo.controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@RestControllerpublic class HomeController {    @RequestMapping(&quot;/&quot;)    public String home(){        return &quot;你好，欢迎使用Visual Studio Code!&quot;;    }}</code></pre><p>此时等待 应用重启，再次访问 <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> </p><hr><p>你好，欢迎使用 Visual Studio Code!</p><hr><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>欢迎使用 *<em>Visual Studio Code *</em>！</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><blockquote><p>原文链接：<a href="https://blog.csdn.net/xiaocy66/java/article/details/82875770" target="_blank" rel="noopener">https://blog.csdn.net/xiaocy66/java/article/details/82875770</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装-Java-环境&quot;&gt;&lt;a href=&quot;#安装-Java-环境&quot; class=&quot;headerlink&quot; title=&quot;安装 Java 环境&quot;&gt;&lt;/a&gt;安装 Java 环境&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;h3 id=&quot;概念理解：&quot;&gt;&lt;a href=&quot;#概念理解：&quot; class=&quot;headerlink&quot; title=&quot;概念理解：&quot;&gt;&lt;/a&gt;概念理解：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;J2SE 标准版&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;J2EE 企业版&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;J2ME 用于移动设备、嵌入式设备&lt;/p&gt;
&lt;h3 id=&quot;JRE、JDK、JVM之间的区别与联系&quot;&gt;&lt;a href=&quot;#JRE、JDK、JVM之间的区别与联系&quot; class=&quot;headerlink&quot; title=&quot;JRE、JDK、JVM之间的区别与联系&quot;&gt;&lt;/a&gt;JRE、JDK、JVM之间的区别与联系&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JVM ：英文名称（Java Virtual Machine），就是我们耳熟能详的 Java 虚拟机。它只认识 xxx.class 这种类型的文件，它能够将 class 文件中的字节码指令进行识别并调用操作系统向上的 API 完成动作。所以说，jvm 是 Java 能够跨平台的核心，具体的下文会详细说明。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JRE ：英文名称（Java Runtime Environment），我们叫它：Java 运行时环境。它主要包含两个部分，jvm 的标准实现和 Java 的一些基本类库。它相对于 jvm 来说，多出来的是一部分的 Java 类库。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JDK ：英文名称（Java Development Kit），Java 开发工具包。jdk 是整个 Java 开发的核心，它集成了 jre 和一些好用的小工具。例如：javac.exe，java.exe，jar.exe 等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;显然，这三者的关系是：一层层的嵌套关系。JDK&amp;gt;JRE&amp;gt;JVM&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="liunx" scheme="https://blog.sharef.top/tags/liunx/"/>
    
      <category term="java" scheme="https://blog.sharef.top/tags/java/"/>
    
      <category term="vscode" scheme="https://blog.sharef.top/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>在 win 10 环境下 如何打造一套适合的开发环境之前端环境</title>
    <link href="https://blog.sharef.top/2020/02/21/66b0ce80-95f9-11ea-926e-6f56d5e2c488/"/>
    <id>https://blog.sharef.top/2020/02/21/66b0ce80-95f9-11ea-926e-6f56d5e2c488/</id>
    <published>2020-02-20T16:00:00.000Z</published>
    <updated>2020-05-15T05:53:17.305Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ul><li>win10 专业版 </li></ul><blockquote><p>如果安装的是 win10 企业版本呢，由于太纯净了，连<strong>应用商店</strong>都没有，我们需要自己去下载一下<strong>应用商店</strong></p></blockquote><ul><li><p>开启 Linux 子系统服务</p><p>操作 步骤：</p><ol><li>打开 <strong>控制面板</strong></li><li>找到 <strong>程序</strong></li><li>点击 <strong>启用或关闭 Windows 功能</strong></li><li>在差不多倒数的几个，找到 <strong>适用于Linux 的 Windows 子系统</strong> ，<em>打勾</em>，等待安装好后，重启电脑</li></ol></li><li><p>安装 Linux 子系统</p><ol><li>打开 <strong>应用商店</strong>，如果没有登陆，需要实现登录 一下</li><li>搜索 Linux </li><li>选择 <strong>Ubuntu 18.04 LTS</strong> 选择安装，如果下载速度较慢，可以打开<strong>传递优化</strong></li><li>等待下载好后，直接启动就好，此处一般时间比较长，请耐心等待，开启后，设置自己的 <strong>用户名</strong> 和 <strong>密码</strong></li></ol></li><li><p>启动配置 Ubuntu</p><p>这里可以根据自身来配置一些东西，比如替换镜像为国内阿里源，具体的配置还需要，自己去查就好，</p><p>如果要使用 root 权限，直接使用 sudo + commend 就好</p></li></ul><h2 id="安装编辑器"><a href="#安装编辑器" class="headerlink" title="安装编辑器"></a>安装编辑器</h2><p>这里可选择 vscode 为例，因为 vsCode 有现成的插件可以很好的在 wsl 中调试代码、共享文件</p><a id="more"></a><ul><li>下载地址：<a href="https://code.visualstudio.com/docs/?dv=win" target="_blank" rel="noopener">https://code.visualstudio.com/docs/?dv=win</a></li><li>安装插件：</li></ul><ol><li>直接搜索 <code>@idms-vscode-remote.remote-wsl</code> 安装，关于更多 wsl 在 vs 中使用，可参考 <a href="https://aka.ms/vscode-remote/wsl/getting-started" target="_blank" rel="noopener">https://aka.ms/vscode-remote/wsl/getting-started</a></li><li>其他的插件可根据自身去 下载、安装，比如 中文包、主题、图标等</li><li>重启编辑器</li></ol><h2 id="在-ubuntu-中安装-开发环境"><a href="#在-ubuntu-中安装-开发环境" class="headerlink" title="在 ubuntu 中安装 开发环境"></a>在 ubuntu 中安装 开发环境</h2><p>此处以安装 nodejs 为例，打开 vscode 编辑器，按 <code>ctrl</code> + ` 打开终端，此时发现还是 win10 的命令行，我们可以点击左侧边栏的 <strong>远程资源管理器</strong>，进入到 wsl 列表中，选中我们刚刚安装的 ubuntu18.04 ，此时会重新开一个窗口，这时我们在 打开终端，我们会发现已经进入到我们的 Linux 系统了。</p><p>安装 nodejs 所有命令以及操作如下：</p><pre><code class="shell">// 获取最新的node二进制包$ wegt https://npm.taobao.org/mirrors/node/v12.16.1/node-v12.16.1-linux-x64.tar.xz// 解压node包$ tar -xvf  node-v12.16.1-linux-x64.tar.xz// 建立 nodejs 文件夹 并将解压好的移入 nodejs 文件夹$ cd /usr/local/$ sudo mkdir -p soft/nodejs// 不要一味的赋值，看清自己下载的版本$ sudo mv ~/node-v12.16.1-linux-x64/* ./nodejs/// 建立软连接$ sudo ln -s /usr/local/soft/nodejs/bin/node  /usr/local/bin/node$ sudo ln -s /usr/local/soft/nodejs/bin/npm  /usr/local/bin/npm $ sudo ln -s /usr/local/soft/nodejs/bin/npx  /usr/local/bin/npx// 测试安装成功与否,如果打印出版本信息，则安装成功，如果没有，则应细细检查步骤，重复一下$ npm -v // v12.16.1$ node -v // 6.13.4$ npx -v // 6.13.4// 如果在生产服务器上，可以用ftp上传// 注意，如果在生产服务器上安装时，最好是建立一个node的用户，方便管理，由于是本地开发我们就可以随自己喜好了</code></pre><h2 id="测试刚刚搭建好的开发环境"><a href="#测试刚刚搭建好的开发环境" class="headerlink" title="测试刚刚搭建好的开发环境"></a>测试刚刚搭建好的开发环境</h2><p>在 win10 中，新建一个项目文件夹，右键用 vscode 打开，在左下角点击绿色的双对箭头(&gt;&lt;)图标,选择 Reopen Folder in WSL，按 <code>ctrl</code> + ` 进入命令行，如下：</p><pre><code class="she">****@***:/mnt/c/project$ </code></pre><p>由路径可一看出来，我们的工程目录已经自动挂载到Linux系统重量。</p><h2 id="打开-linux-子系统的文件"><a href="#打开-linux-子系统的文件" class="headerlink" title="打开 linux 子系统的文件"></a>打开 linux 子系统的文件</h2><p><code>\\wsl$\Ubuntu-18.04\home\</code></p><p>此时请享受，在linxu环境下，带来的畅快体验，可以避免大量由于Windows的原因导致的坑点。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>请认真反复</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;win10 专业版 &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;如果安装的是 win10 企业版本呢，由于太纯净了，连&lt;strong&gt;应用商店&lt;/strong&gt;都没有，我们需要自己去下载一下&lt;strong&gt;应用商店&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;开启 Linux 子系统服务&lt;/p&gt;
&lt;p&gt;操作 步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开 &lt;strong&gt;控制面板&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;找到 &lt;strong&gt;程序&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;点击 &lt;strong&gt;启用或关闭 Windows 功能&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在差不多倒数的几个，找到 &lt;strong&gt;适用于Linux 的 Windows 子系统&lt;/strong&gt; ，&lt;em&gt;打勾&lt;/em&gt;，等待安装好后，重启电脑&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装 Linux 子系统&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开 &lt;strong&gt;应用商店&lt;/strong&gt;，如果没有登陆，需要实现登录 一下&lt;/li&gt;
&lt;li&gt;搜索 Linux &lt;/li&gt;
&lt;li&gt;选择 &lt;strong&gt;Ubuntu 18.04 LTS&lt;/strong&gt; 选择安装，如果下载速度较慢，可以打开&lt;strong&gt;传递优化&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;等待下载好后，直接启动就好，此处一般时间比较长，请耐心等待，开启后，设置自己的 &lt;strong&gt;用户名&lt;/strong&gt; 和 &lt;strong&gt;密码&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;启动配置 Ubuntu&lt;/p&gt;
&lt;p&gt;这里可以根据自身来配置一些东西，比如替换镜像为国内阿里源，具体的配置还需要，自己去查就好，&lt;/p&gt;
&lt;p&gt;如果要使用 root 权限，直接使用 sudo + commend 就好&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;安装编辑器&quot;&gt;&lt;a href=&quot;#安装编辑器&quot; class=&quot;headerlink&quot; title=&quot;安装编辑器&quot;&gt;&lt;/a&gt;安装编辑器&lt;/h2&gt;&lt;p&gt;这里可选择 vscode 为例，因为 vsCode 有现成的插件可以很好的在 wsl 中调试代码、共享文件&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://blog.sharef.top/categories/linux/"/>
    
      <category term="前端" scheme="https://blog.sharef.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="环境搭建" scheme="https://blog.sharef.top/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="liunx" scheme="https://blog.sharef.top/tags/liunx/"/>
    
      <category term="node" scheme="https://blog.sharef.top/tags/node/"/>
    
  </entry>
  
</feed>
