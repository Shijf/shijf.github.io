<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sharef</title>
  
  <subtitle>的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.sharef.top/"/>
  <updated>2020-06-04T05:50:25.074Z</updated>
  <id>https://blog.sharef.top/</id>
  
  <author>
    <name>shijf</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>彻底搞定flex (持续更新)</title>
    <link href="https://blog.sharef.top/2020/06/04/b0ff7080-a626-11ea-9576-3fae9b2382b0/"/>
    <id>https://blog.sharef.top/2020/06/04/b0ff7080-a626-11ea-9576-3fae9b2382b0/</id>
    <published>2020-06-04T05:38:25.000Z</published>
    <updated>2020-06-04T05:50:25.074Z</updated>
    
    <content type="html"><![CDATA[<h1 id="flex-布局初体验"><a href="#flex-布局初体验" class="headerlink" title="flex 布局初体验"></a>flex 布局初体验</h1><p><img src="https://cdn.jsdelivr.net/gh/shijf/shijf.github.io/images/1591249474353.png" alt="image"></p><p>假设我们要实现一个这样的布局，三个色块水平排版;</p><h2 id="一般写法"><a href="#一般写法" class="headerlink" title="一般写法"></a>一般写法</h2><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;flex&lt;/title&gt;    &lt;style&gt;&lt;/style&gt;    &lt;link rel=&quot;stylesheet&quot; href=&quot;index.css&quot;&gt;&lt;/head&gt;&lt;body&gt;    &lt;ul&gt;        &lt;li&gt;1&lt;/li&gt;        &lt;li&gt;2&lt;/li&gt;        &lt;li&gt;3&lt;/li&gt;    &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><pre><code class="css">*{    margin: 0;    padding: 0;}ul {    margin: 50px;    border: 1px solid #000000;    overflow: hidden;    width: 300px;    color: #ffffff;}li {    line-height: 50px;    list-style: none;    height: 50px;    width: 50px;    background-color: blue;    text-align: center;    float: left;}ul li:first-child {    background-color: red;}ul li:last-child{    background-color: green;}</code></pre><p>从代码看出，我们用了浮动。而且浮动布局并不会撑起父元素的高度，我们还需要清楚浮动(overflow: hidden;)</p><h3 id="用flex布局实现"><a href="#用flex布局实现" class="headerlink" title="用flex布局实现"></a>用flex布局实现</h3><pre><code class="css">*{    margin: 0;    padding: 0;}ul {    margin: 50px;    border: 1px solid #000000;    /* overflow: hidden; */    width: 300px;    color: #ffffff;    display: flex;}li {    line-height: 50px;    list-style: none;    height: 50px;    width: 50px;    background-color: blue;    text-align: center;    /* float: left; */}ul li:first-child {    background-color: red;}ul li:last-child{    background-color: green;}</code></pre><p>我们只需要告诉父元素，display: flex; 即可实现。是不是 so easy！</p><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li><strong>伸缩容器</strong>： 在上述的示例中，ul 即为伸缩容器</li><li><strong>伸缩项</strong>： 伸缩容器的子元素，就是伸缩项，在上述示例中，li 为伸缩项</li><li><strong>主轴</strong>: 在默认情况下水平方向上称为<strong>主轴</strong>，主轴的从左到右 分别为 主轴的起点、主轴的终点</li><li><strong>侧轴</strong>：在默认情况下垂直方向上称为<strong>侧轴</strong>，侧轴的从上到下 分别称为 侧轴的起点、侧轴的终点</li></ul><p>图示说明：</p><p><img src="https://cdn.jsdelivr.net/gh/shijf/shijf.github.io/images/1591249508155.png" alt="image"></p><h2 id="主轴方向"><a href="#主轴方向" class="headerlink" title="主轴方向"></a>主轴方向</h2><pre><code class="css">*{    margin: 0;    padding: 0;}ul {    margin: 50px;    border: 1px solid #000000;    width: 300px;    color: #ffffff;    display: flex;}li {    line-height: 50px;    list-style: none;    height: 50px;    width: 50px;    background-color: blue;    text-align: center;}ul li:first-child {    background-color: red;}ul li:last-child{    background-color: green;}</code></pre><p>以上代码的效果：</p><p><img src="https://cdn.jsdelivr.net/gh/shijf/shijf.github.io/images/1591249524969.png" alt="image"></p><p>可以看到，flex 默认的排版时从左到有的，即主轴方向是水平向右的。如果需要想要从右向左，则需要修改主轴的起点方向。</p><ul><li>相关属性：flex-direction<ul><li>属性参数： row（默认：水平从左到右）row-reverse（从右到左）</li></ul></li></ul><p>我们来试一下不同的取值:</p><ul><li><code>row-reverse</code> （主轴从右到左）</li></ul><pre><code class="css">ul{    flex-direction: row-reverse;}</code></pre><p><img src="https://cdn.jsdelivr.net/gh/shijf/shijf.github.io/images/1591249541816.png" alt="image"></p><ul><li><code>column</code>（主轴方向垂直从上到下）</li></ul><pre><code class="css">ul{    flex-direction: column;}</code></pre><p><img src="https://cdn.jsdelivr.net/gh/shijf/shijf.github.io/images/1591249552700.png" alt="image"></p><ul><li><code>column-reverse</code> (主轴反向垂直从下到上)</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shijf/shijf.github.io/images/1591249562980.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;flex-布局初体验&quot;&gt;&lt;a href=&quot;#flex-布局初体验&quot; class=&quot;headerlink&quot; title=&quot;flex 布局初体验&quot;&gt;&lt;/a&gt;flex 布局初体验&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/
      
    
    </summary>
    
    
      <category term="前端" scheme="https://blog.sharef.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="教程" scheme="https://blog.sharef.top/categories/%E5%89%8D%E7%AB%AF/%E6%95%99%E7%A8%8B/"/>
    
      <category term="flex" scheme="https://blog.sharef.top/categories/%E5%89%8D%E7%AB%AF/%E6%95%99%E7%A8%8B/flex/"/>
    
    
  </entry>
  
  <entry>
    <title>如何利用 VSCode 打造一个 java 的开发环境</title>
    <link href="https://blog.sharef.top/2020/05/15/30e42f40-9667-11ea-a46f-b77762f93269/"/>
    <id>https://blog.sharef.top/2020/05/15/30e42f40-9667-11ea-a46f-b77762f93269/</id>
    <published>2020-05-15T04:47:33.000Z</published>
    <updated>2020-06-04T05:50:25.074Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装-Java-环境"><a href="#安装-Java-环境" class="headerlink" title="安装 Java 环境"></a>安装 Java 环境</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="概念理解："><a href="#概念理解：" class="headerlink" title="概念理解："></a>概念理解：</h3><ul><li><p>J2SE 标准版</p></li><li><p>J2EE 企业版</p></li><li><p>J2ME 用于移动设备、嵌入式设备</p><h3 id="JRE、JDK、JVM之间的区别与联系"><a href="#JRE、JDK、JVM之间的区别与联系" class="headerlink" title="JRE、JDK、JVM之间的区别与联系"></a>JRE、JDK、JVM之间的区别与联系</h3></li><li><p>JVM ：英文名称（Java Virtual Machine），就是我们耳熟能详的 Java 虚拟机。它只认识 xxx.class 这种类型的文件，它能够将 class 文件中的字节码指令进行识别并调用操作系统向上的 API 完成动作。所以说，jvm 是 Java 能够跨平台的核心，具体的下文会详细说明。</p></li><li><p>JRE ：英文名称（Java Runtime Environment），我们叫它：Java 运行时环境。它主要包含两个部分，jvm 的标准实现和 Java 的一些基本类库。它相对于 jvm 来说，多出来的是一部分的 Java 类库。</p></li><li><p>JDK ：英文名称（Java Development Kit），Java 开发工具包。jdk 是整个 Java 开发的核心，它集成了 jre 和一些好用的小工具。例如：javac.exe，java.exe，jar.exe 等。</p></li></ul><p>显然，这三者的关系是：一层层的嵌套关系。JDK&gt;JRE&gt;JVM</p><a id="more"></a><h2 id="Linux-安装-Java-环境"><a href="#Linux-安装-Java-环境" class="headerlink" title="Linux 安装 Java 环境"></a>Linux 安装 Java 环境</h2><p>此处需要结合上一篇 <a href="https://blog.sharef.top/2020/02/21/66b0ce80-95f9-11ea-926e-6f56d5e2c488/">《在win 10 环境下 如何打造一套适合的开发环境》</a>，将ubuntu 设置为 主要的开发、运行环境。</p><ul><li>官网地址：<a href="https://www.oracle.com/downloads/#category-java" target="_blank" rel="noopener">https://www.oracle.com/downloads/#category-java</a> （2020/03/30版，可能链接会变化）</li><li>找到 Java -&gt; Java (JDK) for Developers 点击，目前地址 ：<a href="https://www.oracle.com/java/technologies/javase-downloads.html" target="_blank" rel="noopener">https://www.oracle.com/java/technologies/javase-downloads.html</a></li><li>这里采用  Linux Compressed Archive ，下载地址：<a href="https://download.oracle.com/otn-pub/java/jdk/14+36/076bab302c7b4508975440c56f6cc26a/jdk-14_linux-x64_bin.tar.gz" target="_blank" rel="noopener">https://download.oracle.com/otn-pub/java/jdk/14+36/076bab302c7b4508975440c56f6cc26a/jdk-14_linux-x64_bin.tar.gz</a> 下载太慢，尝试使用迅雷等工具，如果链接地址有 auth 字样的参数，请删除</li></ul><p>以下是在 linux 环境中安装, 用 <code>$</code> 来注明</p><pre><code class="shell">// 新建目录$ sudo mkdir /url/local -p soft/java// 将软件包移动到新建的目录$ sudo mv ./jdk-14_linux-x64_bin.tar.gz /url/local/soft/java// 移动到 java 目录下$ cd /url/local/soft/java// 解压$ sudo tar -zxvf jdk-14_linux-x64_bin.tar.gz// `ls` 查看发现，没有jre目录，此时需要手动安装一下$ sudo cd jdk-14/bin &amp;&amp; ./jlink.exe --module-path jmods --add-modules java.desktop --output jre// 设置环境变量$ sudo vim /etc/profile// 在文件末尾添加以下代码</code></pre><pre><code class="shell">// /etc/profileset java environmentJAVA_HOME=/usr/local/soft/java/jdk-14        JRE_HOME=/usr/local/soft/java/jdk-14/jre     CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/libPATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/binexport JAVA_HOME JRE_HOME CLASS_PATH PATH</code></pre><pre><code class="shell">// 刷新终端区域，使配置生效。$ sudo source /etc/profile// 测试$ java -version</code></pre><p>打印出 java 版本信息，则说明 JDK 安装成功</p><p><strong>注意，如果你在 <code>wsl</code>，可能需要重启 linux 子系统，简单除暴，重启下电脑</strong></p><h1 id="安装-maven-并配置-阿里源"><a href="#安装-maven-并配置-阿里源" class="headerlink" title="安装 maven 并配置 阿里源"></a>安装 maven 并配置 阿里源</h1><ul><li>官网地址：<a href="https://maven.apache.org/download.cgi" target="_blank" rel="noopener">https://maven.apache.org/download.cgi</a></li><li>国内加速地址：<a href="http://mirror.bit.edu.cn/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz" target="_blank" rel="noopener">http://mirror.bit.edu.cn/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz</a></li></ul><pre><code class="shell">// 新建目录$ sudo mkdir /url/local/soft/maven // 移动到新建好的目录$ cd /url/local/soft/maven // 下载安装包$ sudo wget http://mirror.bit.edu.cn/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz// 解压$ sudo tar zvxf apache-maven-3.6.3-bin.tar.gz// 测试安装包, 如果可以打印出版本信息，则下载、解压没有问题$ sudo cd apache-maven-3.6.3 &amp;&amp; ./bin/mvn -v </code></pre><pre><code class="shell">// 设置环境变量$ sudo vim /etc/profile// 在文件结尾添加以下配置信息export MAVEN_HOME=/url/local/soft/maven/apache-maven-3.6.3export PATH=$MAVEN_HOME/bin:$PATH// 保存并source profile$ sudo source /ect/profile// 测试环境变量$ mvn -v</code></pre><p>打印出 maven  版本信息，则说明 maven 安装成功<br><strong>注意，如果你在 <code>wsl</code>，可能需要重启 linux 子系统，简单除暴，重启下电脑</strong></p><ul><li>配置国内 阿里 镜像 源，或者是 私有库地址加速</li></ul><pre><code class="shell"> &lt;mirror&gt;      &lt;id&gt;alimaven&lt;/id&gt;      &lt;name&gt;aliyun maven&lt;/name&gt;      &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;       &lt;/mirror&gt;</code></pre><p>首先，编辑文件 <code>/url/local/soft/maven/apache-maven-3.6.3/conf/settings.xml</code>，将上述的配置信息添加到 mirrors（镜像）节点。<br>然后，重启 vs code，即可生效。</p><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul><li>java 或者 jdk 安装路径 <code>/usr/local/soft/java/jdk-14</code></li><li>maven 安装路径 <code>/usr/local/soft/maven/apache-maven-3.6.3</code></li></ul><p>可能每个人 安装的 路径 不太相同，除非是按着以上步骤来的，不过不要紧，可以通过<br><code>which mvn</code> 和 <code>which java</code> 分别来查看 当前系统安装的 maven 和 java 的路径<br>比如我查到的路径分别为：</p><ul><li><code>/usr/local/soft/maven/apache-maven-3.6.3/bin/mvn</code></li><li><code>/usr/local/soft/java/jdk-14/bin/java</code></li></ul><p>So easy, too happy !</p><h1 id="安装扩展包"><a href="#安装扩展包" class="headerlink" title="安装扩展包"></a>安装扩展包</h1><ul><li><ol><li>搜索并安装  java Extension Pack </li></ol></li><li><ol start="2"><li>搜索并安装 Spring Boot Extension Pack</li></ol></li><li><ol start="3"><li>重启编辑器</li></ol><p>以上两个扩展已关联java项目开发主要使用的maven、springboot等所需要的扩展。</p></li></ul><h1 id="配置-maven、java-扩展包"><a href="#配置-maven、java-扩展包" class="headerlink" title="配置 maven、java 扩展包"></a>配置 maven、java 扩展包</h1><p>点左下角的设置图标-&gt;设置</p><pre><code class="json">// settings.json{    &quot;java.home&quot;: &quot;/usr/local/soft/java/jdk-14&quot;,    &quot;java.configuration.maven.userSettings&quot;: &quot;/url/local/soft/maven/apache-maven-3.6.3/conf/settings.xml&quot;,    &quot;maven.executable.path&quot;: &quot;/usr/local/soft/maven/apache-maven-3.6.3/bin/mvn&quot;,    &quot;maven.terminal.useJavaHome&quot;: true,    &quot;maven.terminal.customEnv&quot;: [        {            &quot;environmentVariable&quot;: &quot;JAVA_HOME&quot;,            &quot;value&quot;: &quot;/usr/local/soft/java/jdk-14&quot;        }    ]}</code></pre><p>主要的配置信息，如上。</p><h1 id="创建一个-Spring-Boot-项目"><a href="#创建一个-Spring-Boot-项目" class="headerlink" title="创建一个 Spring Boot 项目"></a>创建一个 Spring Boot 项目</h1><blockquote><p>输入Ctrl + Shift + P 打开命令面板，按照以下步骤填写相应内容即可：</p><ol><li>输入Spring，选择maven类型工程</li><li>选择工程的语言：java</li><li>填写工程的Group Id：com.test</li><li>填写工程的ArtifactId：demo</li><li>选择springboot版本：2.0.5</li><li>搜索添加你需要的依赖库，鼠标单击可勾选，这里只添加以下几个：<br>DevTools（代码修改热更新，无需重启）、Web（集成tomcat、SpringMVC）、Lombok（智能&gt; 生成setter、getter、toString等接口，无需手动生成，代码更简介）</li><li>选定依赖库后回车，然后选择一个目录用于初始化工程文件，最后会提示是否打开工程目录，点”open it”，或者自己手动从编辑器左侧的文件-打开文件夹-选定刚才这个目录即可。</li></ol></blockquote><h1 id="配置运行环境"><a href="#配置运行环境" class="headerlink" title="配置运行环境"></a>配置运行环境</h1><p>启动工程之前还需要配置下运行环境，点左边的小虫子图标，然后点上面的下拉箭头，选择添加配置，VS Code会自动为我们创建启动配置，我们只要修改mainClass就好了，配置示例如下：</p><pre><code class="json">{    // 使用 IntelliSense 了解相关属性。     // 悬停以查看现有属性的描述。    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387    &quot;version&quot;: &quot;0.2.0&quot;,    &quot;configurations&quot;: [        {            &quot;type&quot;: &quot;java&quot;,            &quot;name&quot;: &quot;CodeLens (Launch) - DemoApplication&quot;,            &quot;request&quot;: &quot;launch&quot;,            &quot;mainClass&quot;: &quot;com.example.demo.DemoApplication&quot;,            &quot;projectName&quot;: &quot;demo&quot;        }    ]}</code></pre><p>按F5或者点 DemoApplication.java 的 run 按钮启动，此时在命令行可知tomcat服务已经启动，端口号是8080，访问路径根目录为空。</p><p>在浏览器访问 <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a><br>提示如下错误：</p><hr><p><strong>Whitelabel Error Page</strong><br>This application has no explicit mapping for /error, so you are seeing this as a fallback.</p><p>Mon Mar 30 19:41:47 CST 2020<br>There was an unexpected error (type=Not Found, status=404).<br>No message available</p><hr><p>这说明我们的服务确实启动可用了，但是访问出这个错误，是因为我们没有定义服务器访问这个根路径对应的应答接口导致的。我们在 demo 包下面新建个 controller 包，然后新建个 HomeController.java 文件，内容如下：</p><pre><code class="java">package com.example.demo.controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@RestControllerpublic class HomeController {    @RequestMapping(&quot;/&quot;)    public String home(){        return &quot;你好，欢迎使用Visual Studio Code!&quot;;    }}</code></pre><p>此时等待 应用重启，再次访问 <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> </p><hr><p>你好，欢迎使用 Visual Studio Code!</p><hr><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>欢迎使用 *<em>Visual Studio Code *</em>！</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><blockquote><p>原文链接：<a href="https://blog.csdn.net/xiaocy66/java/article/details/82875770" target="_blank" rel="noopener">https://blog.csdn.net/xiaocy66/java/article/details/82875770</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装-Java-环境&quot;&gt;&lt;a href=&quot;#安装-Java-环境&quot; class=&quot;headerlink&quot; title=&quot;安装 Java 环境&quot;&gt;&lt;/a&gt;安装 Java 环境&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;h3 id=&quot;概念理解：&quot;&gt;&lt;a href=&quot;#概念理解：&quot; class=&quot;headerlink&quot; title=&quot;概念理解：&quot;&gt;&lt;/a&gt;概念理解：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;J2SE 标准版&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;J2EE 企业版&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;J2ME 用于移动设备、嵌入式设备&lt;/p&gt;
&lt;h3 id=&quot;JRE、JDK、JVM之间的区别与联系&quot;&gt;&lt;a href=&quot;#JRE、JDK、JVM之间的区别与联系&quot; class=&quot;headerlink&quot; title=&quot;JRE、JDK、JVM之间的区别与联系&quot;&gt;&lt;/a&gt;JRE、JDK、JVM之间的区别与联系&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JVM ：英文名称（Java Virtual Machine），就是我们耳熟能详的 Java 虚拟机。它只认识 xxx.class 这种类型的文件，它能够将 class 文件中的字节码指令进行识别并调用操作系统向上的 API 完成动作。所以说，jvm 是 Java 能够跨平台的核心，具体的下文会详细说明。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JRE ：英文名称（Java Runtime Environment），我们叫它：Java 运行时环境。它主要包含两个部分，jvm 的标准实现和 Java 的一些基本类库。它相对于 jvm 来说，多出来的是一部分的 Java 类库。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JDK ：英文名称（Java Development Kit），Java 开发工具包。jdk 是整个 Java 开发的核心，它集成了 jre 和一些好用的小工具。例如：javac.exe，java.exe，jar.exe 等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;显然，这三者的关系是：一层层的嵌套关系。JDK&amp;gt;JRE&amp;gt;JVM&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="liunx" scheme="https://blog.sharef.top/tags/liunx/"/>
    
      <category term="java" scheme="https://blog.sharef.top/tags/java/"/>
    
      <category term="vscode" scheme="https://blog.sharef.top/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>在 win 10 环境下 如何打造一套适合的开发环境之前端环境</title>
    <link href="https://blog.sharef.top/2020/02/21/66b0ce80-95f9-11ea-926e-6f56d5e2c488/"/>
    <id>https://blog.sharef.top/2020/02/21/66b0ce80-95f9-11ea-926e-6f56d5e2c488/</id>
    <published>2020-02-20T16:00:00.000Z</published>
    <updated>2020-06-04T05:50:25.074Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ul><li>win10 专业版 </li></ul><blockquote><p>如果安装的是 win10 企业版本呢，由于太纯净了，连<strong>应用商店</strong>都没有，我们需要自己去下载一下<strong>应用商店</strong></p></blockquote><ul><li><p>开启 Linux 子系统服务</p><p>操作 步骤：</p><ol><li>打开 <strong>控制面板</strong></li><li>找到 <strong>程序</strong></li><li>点击 <strong>启用或关闭 Windows 功能</strong></li><li>在差不多倒数的几个，找到 <strong>适用于Linux 的 Windows 子系统</strong> ，<em>打勾</em>，等待安装好后，重启电脑</li></ol></li><li><p>安装 Linux 子系统</p><ol><li>打开 <strong>应用商店</strong>，如果没有登陆，需要实现登录 一下</li><li>搜索 Linux </li><li>选择 <strong>Ubuntu 18.04 LTS</strong> 选择安装，如果下载速度较慢，可以打开<strong>传递优化</strong></li><li>等待下载好后，直接启动就好，此处一般时间比较长，请耐心等待，开启后，设置自己的 <strong>用户名</strong> 和 <strong>密码</strong></li></ol></li><li><p>启动配置 Ubuntu</p><p>这里可以根据自身来配置一些东西，比如替换镜像为国内阿里源，具体的配置还需要，自己去查就好，</p><p>如果要使用 root 权限，直接使用 sudo + commend 就好</p></li></ul><h2 id="安装编辑器"><a href="#安装编辑器" class="headerlink" title="安装编辑器"></a>安装编辑器</h2><p>这里可选择 vscode 为例，因为 vsCode 有现成的插件可以很好的在 wsl 中调试代码、共享文件</p><a id="more"></a><ul><li>下载地址：<a href="https://code.visualstudio.com/docs/?dv=win" target="_blank" rel="noopener">https://code.visualstudio.com/docs/?dv=win</a></li><li>安装插件：</li></ul><ol><li>直接搜索 <code>@idms-vscode-remote.remote-wsl</code> 安装，关于更多 wsl 在 vs 中使用，可参考 <a href="https://aka.ms/vscode-remote/wsl/getting-started" target="_blank" rel="noopener">https://aka.ms/vscode-remote/wsl/getting-started</a></li><li>其他的插件可根据自身去 下载、安装，比如 中文包、主题、图标等</li><li>重启编辑器</li></ol><h2 id="在-ubuntu-中安装-开发环境"><a href="#在-ubuntu-中安装-开发环境" class="headerlink" title="在 ubuntu 中安装 开发环境"></a>在 ubuntu 中安装 开发环境</h2><p>此处以安装 nodejs 为例，打开 vscode 编辑器，按 <code>ctrl</code> + ` 打开终端，此时发现还是 win10 的命令行，我们可以点击左侧边栏的 <strong>远程资源管理器</strong>，进入到 wsl 列表中，选中我们刚刚安装的 ubuntu18.04 ，此时会重新开一个窗口，这时我们在 打开终端，我们会发现已经进入到我们的 Linux 系统了。</p><p>安装 nodejs 所有命令以及操作如下：</p><pre><code class="shell">// 获取最新的node二进制包$ wegt https://npm.taobao.org/mirrors/node/v12.16.1/node-v12.16.1-linux-x64.tar.xz// 解压node包$ tar -xvf  node-v12.16.1-linux-x64.tar.xz// 建立 nodejs 文件夹 并将解压好的移入 nodejs 文件夹$ cd /usr/local/$ sudo mkdir -p soft/nodejs// 不要一味的赋值，看清自己下载的版本$ sudo mv ~/node-v12.16.1-linux-x64/* ./nodejs/// 建立软连接$ sudo ln -s /usr/local/soft/nodejs/bin/node  /usr/local/bin/node$ sudo ln -s /usr/local/soft/nodejs/bin/npm  /usr/local/bin/npm $ sudo ln -s /usr/local/soft/nodejs/bin/npx  /usr/local/bin/npx// 测试安装成功与否,如果打印出版本信息，则安装成功，如果没有，则应细细检查步骤，重复一下$ npm -v // v12.16.1$ node -v // 6.13.4$ npx -v // 6.13.4// 如果在生产服务器上，可以用ftp上传// 注意，如果在生产服务器上安装时，最好是建立一个node的用户，方便管理，由于是本地开发我们就可以随自己喜好了</code></pre><h2 id="测试刚刚搭建好的开发环境"><a href="#测试刚刚搭建好的开发环境" class="headerlink" title="测试刚刚搭建好的开发环境"></a>测试刚刚搭建好的开发环境</h2><p>在 win10 中，新建一个项目文件夹，右键用 vscode 打开，在左下角点击绿色的双对箭头(&gt;&lt;)图标,选择 Reopen Folder in WSL，按 <code>ctrl</code> + ` 进入命令行，如下：</p><pre><code class="she">****@***:/mnt/c/project$ </code></pre><p>由路径可一看出来，我们的工程目录已经自动挂载到Linux系统重量。</p><h2 id="打开-linux-子系统的文件"><a href="#打开-linux-子系统的文件" class="headerlink" title="打开 linux 子系统的文件"></a>打开 linux 子系统的文件</h2><p><code>\\wsl$\Ubuntu-18.04\home\</code></p><p>此时请享受，在linxu环境下，带来的畅快体验，可以避免大量由于Windows的原因导致的坑点。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>请认真反复</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;win10 专业版 &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;如果安装的是 win10 企业版本呢，由于太纯净了，连&lt;strong&gt;应用商店&lt;/strong&gt;都没有，我们需要自己去下载一下&lt;strong&gt;应用商店&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;开启 Linux 子系统服务&lt;/p&gt;
&lt;p&gt;操作 步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开 &lt;strong&gt;控制面板&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;找到 &lt;strong&gt;程序&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;点击 &lt;strong&gt;启用或关闭 Windows 功能&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在差不多倒数的几个，找到 &lt;strong&gt;适用于Linux 的 Windows 子系统&lt;/strong&gt; ，&lt;em&gt;打勾&lt;/em&gt;，等待安装好后，重启电脑&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装 Linux 子系统&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开 &lt;strong&gt;应用商店&lt;/strong&gt;，如果没有登陆，需要实现登录 一下&lt;/li&gt;
&lt;li&gt;搜索 Linux &lt;/li&gt;
&lt;li&gt;选择 &lt;strong&gt;Ubuntu 18.04 LTS&lt;/strong&gt; 选择安装，如果下载速度较慢，可以打开&lt;strong&gt;传递优化&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;等待下载好后，直接启动就好，此处一般时间比较长，请耐心等待，开启后，设置自己的 &lt;strong&gt;用户名&lt;/strong&gt; 和 &lt;strong&gt;密码&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;启动配置 Ubuntu&lt;/p&gt;
&lt;p&gt;这里可以根据自身来配置一些东西，比如替换镜像为国内阿里源，具体的配置还需要，自己去查就好，&lt;/p&gt;
&lt;p&gt;如果要使用 root 权限，直接使用 sudo + commend 就好&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;安装编辑器&quot;&gt;&lt;a href=&quot;#安装编辑器&quot; class=&quot;headerlink&quot; title=&quot;安装编辑器&quot;&gt;&lt;/a&gt;安装编辑器&lt;/h2&gt;&lt;p&gt;这里可选择 vscode 为例，因为 vsCode 有现成的插件可以很好的在 wsl 中调试代码、共享文件&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://blog.sharef.top/categories/linux/"/>
    
      <category term="前端" scheme="https://blog.sharef.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="环境搭建" scheme="https://blog.sharef.top/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="liunx" scheme="https://blog.sharef.top/tags/liunx/"/>
    
      <category term="node" scheme="https://blog.sharef.top/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>利用自己的云服务器搭建内网穿透，免费不限量，主要是速度很给力</title>
    <link href="https://blog.sharef.top/2018/09/04/fc6247d0-9679-11ea-8eb3-976c7845fdb4/"/>
    <id>https://blog.sharef.top/2018/09/04/fc6247d0-9679-11ea-8eb3-976c7845fdb4/</id>
    <published>2018-09-04T14:49:18.000Z</published>
    <updated>2020-06-04T05:50:25.074Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在开发一款基于微信的产品，这里不得不说，<a href="https://github.com/overtrue/wechat" target="_blank" rel="noopener">超哥</a> 的 <a href="https://www.easywechat.com/" target="_blank" rel="noopener">wechatSdk</a> 确实好用，节省了不少时间，但是在本地开发总是会用到内网穿透来实现和微信服务器联调的环节。以前也用户过诸如 <a href="https://natapp.cn" target="_blank" rel="noopener">natapp</a> 类的工具，一个原因是因为，这类工具都是需要费用的，虽然有免费的版本，但是总是会掉线，而且还是限流量。也用过Ngnok，但是如果自己搭建起来比较麻烦，失败率太高了。直接用的话，服务器在国外，在天朝访问你懂的，那是相当的缓慢，一袋烟的功夫过去了，还是个毛都没有，微信接口验证，通过的话，还得看运气。而且每次一个网址只能是用八小时左右，这就需要每次都得到公众号里面重新配置。额……又得等。之前偶然间发现，一个国人开源的神器 <a href="https://github.com/fatedier/frp" target="_blank" rel="noopener">frp</a> ，真的是太棒了，这里分下能给大家。具体能实现的功能，文档里面有详细的说明，我就不罗嗦了。给大家<a href="https://github.com/fatedier/frp/blob/master/README_zh.md" target="_blank" rel="noopener">中文文档</a>。接下来给大家分享一下搭建步骤，也是一个备忘，有好东西当然是要分享了。<br>对了，最近开发微信公众平台需要一些测试用户，希望大家帮忙关注一下，不会给您带来困扰的，这里谢谢各位了。</p><a id="more"></a><h1 id="搭建前端准备工作"><a href="#搭建前端准备工作" class="headerlink" title="搭建前端准备工作"></a>搭建前端准备工作</h1><blockquote><ol><li>拥有独立公网IP的云服务器；</li><li>会简单的liunx命令；</li><li>需要一丢丢耐心。</li></ol></blockquote><blockquote><h3 id="这里我演示的环境："><a href="#这里我演示的环境：" class="headerlink" title="这里我演示的环境："></a>这里我演示的环境：</h3></blockquote><ul><li>公网服务器：<strong>系统：</strong>ubuntu16.04  ** ip<strong>：x.x.x.x **开放端口：</strong>7000（绑定frp）  7500（虚拟机） <strong>作用：</strong>用来做内网穿透的服务器</li><li>内网服务器（虚拟机）：<strong>系统：</strong>centos7  ** ip：<strong>192.168.43.133 **开放端口：</strong> 22 <strong>作用：</strong>用来实现通过外网访问，ssh登陆虚拟机 </li><li>内网（win 10_64bit）： 作用：演示  本地通过访问外网实现访问本地服务器</li><li>公网服务器与内网服务器都需要下载frp进行安装，公网服务器（服务端)</li></ul><h1 id="实际操练"><a href="#实际操练" class="headerlink" title="实际操练"></a>实际操练</h1><blockquote><p>1.下载：<code>wget https://github.com/fatedier/frp/releases/download/v0.21.0/frp_0.21.0_linux_amd64.tar.gz</code><br>2.解压好：<code>tar -zxvf  frp_0.13.0_linux_amd64.tar.gz</code><br>3.进入解压目录 <code>cd  frp_0.13.0_linux_amd64</code><br>4.这里主要关注4个文件，分别是frpc、frpc.ini和frps、frps.ini，前者两个文件是客户端所关注文件，后者两个文件是服务端所关注两个文件。<br>5.配置服务端（公网服务器）<code>vim ./frps.ini</code>:</p></blockquote><pre><code>[common]bind_port = 7000           #与客户端绑定的进行通信的端口vhost_http_port = 80    #访问客户端web服务自定义的端口号 subdomain_host = test.com # 泛域名解析到 公网IP：x.x.x.xtoken = 123456 #验证客户端</code></pre><p>6.保存然后启动服务<code>./frps -c ./frps.ini</code>，这是前台启动，后台启动命令为<code>nohup ./frps -c ./frps.ini &amp;</code></p><blockquote><p>7.在win10_64bit 中下载 <a href="https://github.com/fatedier/frp/releases/download/v0.21.0/frp_0.21.0_windows_amd64.zip" target="_blank" rel="noopener">这个</a>。<br>8.配置客户端（内网）<code>vim ./frpc.ini</code>:</p></blockquote><pre><code>[common]server_addr = x.x.x.xserver_port = 7000token = 123456 # 用于验证服务端[web]type = httplocal_ip = 127.0.0.1local_port = 80subdomain = paper # 二级域名 访问时 即: paper.test.com[ssh]type = tcp local_ip = 192.168.43.133# 虚拟机的内网iplocal_port = 22 #虚拟机的ssh端口remote_port = 8085 #在云服务器记得放行此端口,注意这里不需要在服务端指定</code></pre><blockquote><p>9.保存然后执行./frpc -c ./frpc.ini启动，这是前台启动</p></blockquote><blockquote><p>10、具体访问:<br><code>ssh -oPort=8085 shijf@x.x.x.x</code> 相当于在内网使用 <code>ssh  shijf@192.168.43.133</code><br>打开浏览器访问 <code>http://paper.test.com</code></p></blockquote><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>这里内网穿透并不能直接穿透到我们的内网域名,即 <code>local_ip</code><br>设置为 <code>local_ip = paper.test</code> 它还是访问到 默认的 127.0.0.1<br>这里可以 使用 将 <code>paper.test</code> 的端口修改为 <code>81</code>:,<br>那么我们可以在 客户端你这样设置:<code>local_port = 81</code><br>这样当你访问 <code>http://paper.test.com</code> 就可以直接 访问到 内网域名了,记得在 内网服务器也改  <code>http://paper.test.com</code> 的监听端口为 <code>81</code>.</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这里安利这么久,确实时因为它,真的不错,访问速度快(当然取决于你的云服务器的带宽和内网服务器的配置),如果你也正好在开发微信应用,不如试试吧.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近在开发一款基于微信的产品，这里不得不说，&lt;a href=&quot;https://github.com/overtrue/wechat&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;超哥&lt;/a&gt; 的 &lt;a href=&quot;https://www.easywechat.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;wechatSdk&lt;/a&gt; 确实好用，节省了不少时间，但是在本地开发总是会用到内网穿透来实现和微信服务器联调的环节。以前也用户过诸如 &lt;a href=&quot;https://natapp.cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;natapp&lt;/a&gt; 类的工具，一个原因是因为，这类工具都是需要费用的，虽然有免费的版本，但是总是会掉线，而且还是限流量。也用过Ngnok，但是如果自己搭建起来比较麻烦，失败率太高了。直接用的话，服务器在国外，在天朝访问你懂的，那是相当的缓慢，一袋烟的功夫过去了，还是个毛都没有，微信接口验证，通过的话，还得看运气。而且每次一个网址只能是用八小时左右，这就需要每次都得到公众号里面重新配置。额……又得等。之前偶然间发现，一个国人开源的神器 &lt;a href=&quot;https://github.com/fatedier/frp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;frp&lt;/a&gt; ，真的是太棒了，这里分下能给大家。具体能实现的功能，文档里面有详细的说明，我就不罗嗦了。给大家&lt;a href=&quot;https://github.com/fatedier/frp/blob/master/README_zh.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;中文文档&lt;/a&gt;。接下来给大家分享一下搭建步骤，也是一个备忘，有好东西当然是要分享了。&lt;br&gt;对了，最近开发微信公众平台需要一些测试用户，希望大家帮忙关注一下，不会给您带来困扰的，这里谢谢各位了。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="https://blog.sharef.top/tags/linux/"/>
    
      <category term="微信开发" scheme="https://blog.sharef.top/tags/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>盼望着，盼望着 let&#39;s encrypt 泛域名野卡证书，终于终于上线了</title>
    <link href="https://blog.sharef.top/2018/07/30/a545f2b0-967b-11ea-a177-d1521733a308/"/>
    <id>https://blog.sharef.top/2018/07/30/a545f2b0-967b-11ea-a177-d1521733a308/</id>
    <published>2018-07-30T06:03:45.000Z</published>
    <updated>2020-06-04T05:50:25.074Z</updated>
    
    <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>首先说下，什么叫泛域名，假如我有一个域名 sharef.top ,那么主域名就是 <a href="https://www.sharef.top" target="_blank" rel="noopener">www.sharef.top</a> , 假如还想做一个网站，域名为<a href="https://f.sharef.top" target="_blank" rel="noopener"> f.sharef.top</a> ,如果要想 访问这两个网站，那么我们得同时将我们的这两个域名A记录解析到服务器的IP，同样，假如我们需要为这两个网站 申请 ssl 证书，那么我们要申请两个，来配置。但是泛域名解析的话，我们只需要将 * .sharef.top 这一条 A 记录解析到我们的服务器就好了，那么不管我们，想要访问a.sharef.xin,还是 b.sharef.top 都会解析到 我们的服务器。同样 泛域名解析 也是一样，我们只需申请一次的  .sharef.top 证书，我们这里的 二级域名都是可以 用这一个 ssl 证书就可以了。</p><a id="more"></a><h1 id="官方参考"><a href="#官方参考" class="headerlink" title="官方参考"></a>官方参考</h1><p>GitHub：<a href="https://github.com/Neilpang/acme.sh" target="_blank" rel="noopener">仓库在这里</a><br>官方中文说明：<a href="https://github.com/Neilpang/acme.sh/wiki/%E8%AF%B4%E6%98%8E" target="_blank" rel="noopener">中文文档</a><br>DNSAPI：你可能会是不同的DNS服务商，在 <a href="https://github.com/Neilpang/acme.sh/blob/master/dnsapi/README.md" target="_blank" rel="noopener">这里</a>会查到</p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>首先你要有一台公网服务器：这里我以 <strong><em>阿里云</em></strong>的  centos 7 为例演示：<br>需要安装一些必要的软件 ：</p><pre><code>yum update &amp;&amp; yum install curl -y &amp;&amp; yum install cron -y &amp;&amp; yum install socat -y</code></pre><p><strong>以下操作也可以参考官方文档哈</strong></p><h1 id="使用阿里云域名-api-申请Let’s-Encrypt泛域名免费ssl证书"><a href="#使用阿里云域名-api-申请Let’s-Encrypt泛域名免费ssl证书" class="headerlink" title="使用阿里云域名 api 申请Let’s Encrypt泛域名免费ssl证书"></a>使用阿里云域名 api 申请Let’s Encrypt泛域名免费ssl证书</h1><h2 id="下载-acme-sh-并且执行"><a href="#下载-acme-sh-并且执行" class="headerlink" title="下载 acme.sh 并且执行"></a>下载 acme.sh 并且执行</h2><pre><code>curl https://get.acme.sh | sh</code></pre><h2 id="获取阿里云的Access-Key-ID和Access-Key-Secret到环境变量中"><a href="#获取阿里云的Access-Key-ID和Access-Key-Secret到环境变量中" class="headerlink" title="获取阿里云的Access Key ID和Access Key Secret到环境变量中"></a>获取阿里云的Access Key ID和Access Key Secret到环境变量中</h2><p>阿里云的Access Key ID和Access Key Secret可以在下面<a href="https://account.aliyun.com/login/login.htm?oauth_callback=https%3A%2F%2Fak-console.aliyun.com%2F%3Fspm%3D5176.2020520001.0.0.0EJtVx#/accesskey" target="_blank" rel="noopener">这个</a>页面中登录获取<br><img src="https://cdn.learnku.com/uploads/images/201807/30/18751/Fv5i4dMUpl.png?imageView2/2/w/1240/h/0" alt="file"></p><p>执行以下命令，将密钥添加到环境变量中</p><pre><code>export Ali_Key=&quot;你的Access Key ID&quot;export Ali_Secret=&quot;你的 Access Key Secret&quot;</code></pre><p><img src="https://cdn.learnku.com/uploads/images/201807/30/18751/27CcV0W6Si.png?imageView2/2/w/1240/h/0" alt="file"></p><h2 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h2><p>执行以下命令（将domain.com换成自己的域名）：</p><pre><code>~/.acme.sh/acme.sh --issue --dns dns_ali -d domain.com -d *.domain.com</code></pre><p><strong>注意：第一个 -d 后不可直接写通配符域名*.domain.com，一定要写个单域名，第二个 -d 后面可以写泛域名。<br>否则可能会出现签发的证书无法被信任的情况。</strong></p><p><img src="https://cdn.learnku.com/uploads/images/201807/30/18751/XcZOssYu4p.png?imageView2/2/w/1240/h/0" alt="file"></p><h3 id="之后把这些证书下载下来就好了，所有文件在-acme-sh-你的域名-目录下面就可以了"><a href="#之后把这些证书下载下来就好了，所有文件在-acme-sh-你的域名-目录下面就可以了" class="headerlink" title="之后把这些证书下载下来就好了，所有文件在.acme.sh/你的域名 目录下面就可以了"></a>之后把这些证书下载下来就好了，所有文件在.acme.sh/你的域名 目录下面就可以了</h3><p>配置 ssl 的问题就 自行 搜索教程吧，证书都有啦，还怕搞不成？</p><h1 id="重重之中，记得放行服务器-443端口"><a href="#重重之中，记得放行服务器-443端口" class="headerlink" title="重重之中，记得放行服务器 443端口"></a>重重之中，记得放行服务器 443端口</h1><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li>作者：Noisky  <a href="https://ffis.me/experience/1261.html" target="_blank" rel="noopener">let’s encrypt泛域名野卡证书配置笔记</a></li><li>作者：bboysoul <a href="https://yq.aliyun.com/articles/541843" target="_blank" rel="noopener">使用阿里云域名api申请Let’s Encrypt泛域名免费ssl证书</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h1&gt;&lt;p&gt;首先说下，什么叫泛域名，假如我有一个域名 sharef.top ,那么主域名就是 &lt;a href=&quot;https://www.sharef.top&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;www.sharef.top&lt;/a&gt; , 假如还想做一个网站，域名为&lt;a href=&quot;https://f.sharef.top&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt; f.sharef.top&lt;/a&gt; ,如果要想 访问这两个网站，那么我们得同时将我们的这两个域名A记录解析到服务器的IP，同样，假如我们需要为这两个网站 申请 ssl 证书，那么我们要申请两个，来配置。但是泛域名解析的话，我们只需要将 * .sharef.top 这一条 A 记录解析到我们的服务器就好了，那么不管我们，想要访问a.sharef.xin,还是 b.sharef.top 都会解析到 我们的服务器。同样 泛域名解析 也是一样，我们只需申请一次的  .sharef.top 证书，我们这里的 二级域名都是可以 用这一个 ssl 证书就可以了。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="工具" scheme="https://blog.sharef.top/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>
