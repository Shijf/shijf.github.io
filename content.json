{"meta":{"title":"Sharef","subtitle":"的博客","description":"记录自己的点点滴滴而已，哈哈","author":"shijf","url":"https://blog.sharef.top","root":"/"},"pages":[{"title":"关于","date":"2020-05-15T05:39:53.139Z","updated":"2020-05-15T05:39:53.139Z","comments":true,"path":"about/index.html","permalink":"https://blog.sharef.top/about/index.html","excerpt":"","text":"下面写关于自己的内容"},{"title":"我的朋友们","date":"2020-05-15T05:39:53.139Z","updated":"2020-05-15T05:39:53.139Z","comments":true,"path":"friends/index.html","permalink":"https://blog.sharef.top/friends/index.html","excerpt":"这里写友链上方的内容。","text":"这里写友链上方的内容。 这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。"},{"title":"","date":"2020-05-15T05:39:53.139Z","updated":"2020-05-15T05:39:53.139Z","comments":true,"path":"mylist/index.html","permalink":"https://blog.sharef.top/mylist/index.html","excerpt":"","text":""},{"title":"所有分类","date":"2020-05-15T05:39:53.139Z","updated":"2020-05-15T05:39:53.139Z","comments":true,"path":"blog/categories/index.html","permalink":"https://blog.sharef.top/blog/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2020-05-15T05:39:53.139Z","updated":"2020-05-15T05:39:53.139Z","comments":true,"path":"blog/tags/index.html","permalink":"https://blog.sharef.top/blog/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"如何利用 VSCode 打造一个 java 的开发环境","slug":"spring-boot-env","date":"2020-05-15T04:47:33.000Z","updated":"2020-05-15T05:39:53.139Z","comments":true,"path":"2020/05/15/30e42f40-9667-11ea-a46f-b77762f93269/","link":"","permalink":"https://blog.sharef.top/2020/05/15/30e42f40-9667-11ea-a46f-b77762f93269/","excerpt":"安装 Java 环境概述概念理解： J2SE 标准版 J2EE 企业版 J2ME 用于移动设备、嵌入式设备 JRE、JDK、JVM之间的区别与联系 JVM ：英文名称（Java Virtual Machine），就是我们耳熟能详的 Java 虚拟机。它只认识 xxx.class 这种类型的文件，它能够将 class 文件中的字节码指令进行识别并调用操作系统向上的 API 完成动作。所以说，jvm 是 Java 能够跨平台的核心，具体的下文会详细说明。 JRE ：英文名称（Java Runtime Environment），我们叫它：Java 运行时环境。它主要包含两个部分，jvm 的标准实现和 Java 的一些基本类库。它相对于 jvm 来说，多出来的是一部分的 Java 类库。 JDK ：英文名称（Java Development Kit），Java 开发工具包。jdk 是整个 Java 开发的核心，它集成了 jre 和一些好用的小工具。例如：javac.exe，java.exe，jar.exe 等。 显然，这三者的关系是：一层层的嵌套关系。JDK&gt;JRE&gt;JVM","text":"安装 Java 环境概述概念理解： J2SE 标准版 J2EE 企业版 J2ME 用于移动设备、嵌入式设备 JRE、JDK、JVM之间的区别与联系 JVM ：英文名称（Java Virtual Machine），就是我们耳熟能详的 Java 虚拟机。它只认识 xxx.class 这种类型的文件，它能够将 class 文件中的字节码指令进行识别并调用操作系统向上的 API 完成动作。所以说，jvm 是 Java 能够跨平台的核心，具体的下文会详细说明。 JRE ：英文名称（Java Runtime Environment），我们叫它：Java 运行时环境。它主要包含两个部分，jvm 的标准实现和 Java 的一些基本类库。它相对于 jvm 来说，多出来的是一部分的 Java 类库。 JDK ：英文名称（Java Development Kit），Java 开发工具包。jdk 是整个 Java 开发的核心，它集成了 jre 和一些好用的小工具。例如：javac.exe，java.exe，jar.exe 等。 显然，这三者的关系是：一层层的嵌套关系。JDK&gt;JRE&gt;JVM Linux 安装 Java 环境此处需要结合上一篇 《在win 10 环境下 如何打造一套适合的开发环境》，将ubuntu 设置为 主要的开发、运行环境。 官网地址：https://www.oracle.com/downloads/#category-java （2020/03/30版，可能链接会变化） 找到 Java -&gt; Java (JDK) for Developers 点击，目前地址 ：https://www.oracle.com/java/technologies/javase-downloads.html 这里采用 Linux Compressed Archive ，下载地址：https://download.oracle.com/otn-pub/java/jdk/14+36/076bab302c7b4508975440c56f6cc26a/jdk-14_linux-x64_bin.tar.gz 下载太慢，尝试使用迅雷等工具，如果链接地址有 auth 字样的参数，请删除 以下是在 linux 环境中安装, 用 $ 来注明 // 新建目录 $ sudo mkdir /url/local -p soft/java // 将软件包移动到新建的目录 $ sudo mv ./jdk-14_linux-x64_bin.tar.gz /url/local/soft/java // 移动到 java 目录下 $ cd /url/local/soft/java // 解压 $ sudo tar -zxvf jdk-14_linux-x64_bin.tar.gz // `ls` 查看发现，没有jre目录，此时需要手动安装一下 $ sudo cd jdk-14/bin &amp;&amp; ./jlink.exe --module-path jmods --add-modules java.desktop --output jre // 设置环境变量 $ sudo vim /etc/profile // 在文件末尾添加以下代码 // /etc/profile set java environment JAVA_HOME=/usr/local/soft/java/jdk-14 JRE_HOME=/usr/local/soft/java/jdk-14/jre CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin export JAVA_HOME JRE_HOME CLASS_PATH PATH // 刷新终端区域，使配置生效。 $ sudo source /etc/profile // 测试 $ java -version 打印出 java 版本信息，则说明 JDK 安装成功 注意，如果你在 wsl，可能需要重启 linux 子系统，简单除暴，重启下电脑 安装 maven 并配置 阿里源 官网地址：https://maven.apache.org/download.cgi 国内加速地址：http://mirror.bit.edu.cn/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz // 新建目录 $ sudo mkdir /url/local/soft/maven // 移动到新建好的目录 $ cd /url/local/soft/maven // 下载安装包 $ sudo wget http://mirror.bit.edu.cn/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz // 解压 $ sudo tar zvxf apache-maven-3.6.3-bin.tar.gz // 测试安装包, 如果可以打印出版本信息，则下载、解压没有问题 $ sudo cd apache-maven-3.6.3 &amp;&amp; ./bin/mvn -v // 设置环境变量 $ sudo vim /etc/profile // 在文件结尾添加以下配置信息 export MAVEN_HOME=/url/local/soft/maven/apache-maven-3.6.3 export PATH=$MAVEN_HOME/bin:$PATH // 保存并source profile $ sudo source /ect/profile // 测试环境变量 $ mvn -v 打印出 maven 版本信息，则说明 maven 安装成功注意，如果你在 wsl，可能需要重启 linux 子系统，简单除暴，重启下电脑 配置国内 阿里 镜像 源，或者是 私有库地址加速 &lt;mirror&gt; &lt;id&gt;alimaven&lt;/id&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;/mirror&gt; 首先，编辑文件 /url/local/soft/maven/apache-maven-3.6.3/conf/settings.xml，将上述的配置信息添加到 mirrors（镜像）节点。然后，重启 vs code，即可生效。 环境信息 java 或者 jdk 安装路径 /usr/local/soft/java/jdk-14 maven 安装路径 /usr/local/soft/maven/apache-maven-3.6.3 可能每个人 安装的 路径 不太相同，除非是按着以上步骤来的，不过不要紧，可以通过which mvn 和 which java 分别来查看 当前系统安装的 maven 和 java 的路径比如我查到的路径分别为： /usr/local/soft/maven/apache-maven-3.6.3/bin/mvn /usr/local/soft/java/jdk-14/bin/java So easy, too happy ! 安装扩展包 搜索并安装 java Extension Pack 搜索并安装 Spring Boot Extension Pack 重启编辑器 以上两个扩展已关联java项目开发主要使用的maven、springboot等所需要的扩展。 配置 maven、java 扩展包点左下角的设置图标-&gt;设置 // settings.json { &quot;java.home&quot;: &quot;/usr/local/soft/java/jdk-14&quot;, &quot;java.configuration.maven.userSettings&quot;: &quot;/url/local/soft/maven/apache-maven-3.6.3/conf/settings.xml&quot;, &quot;maven.executable.path&quot;: &quot;/usr/local/soft/maven/apache-maven-3.6.3/bin/mvn&quot;, &quot;maven.terminal.useJavaHome&quot;: true, &quot;maven.terminal.customEnv&quot;: [ { &quot;environmentVariable&quot;: &quot;JAVA_HOME&quot;, &quot;value&quot;: &quot;/usr/local/soft/java/jdk-14&quot; } ] } 主要的配置信息，如上。 创建一个 Spring Boot 项目 输入Ctrl + Shift + P 打开命令面板，按照以下步骤填写相应内容即可： 输入Spring，选择maven类型工程 选择工程的语言：java 填写工程的Group Id：com.test 填写工程的ArtifactId：demo 选择springboot版本：2.0.5 搜索添加你需要的依赖库，鼠标单击可勾选，这里只添加以下几个：DevTools（代码修改热更新，无需重启）、Web（集成tomcat、SpringMVC）、Lombok（智能&gt; 生成setter、getter、toString等接口，无需手动生成，代码更简介） 选定依赖库后回车，然后选择一个目录用于初始化工程文件，最后会提示是否打开工程目录，点”open it”，或者自己手动从编辑器左侧的文件-打开文件夹-选定刚才这个目录即可。 配置运行环境启动工程之前还需要配置下运行环境，点左边的小虫子图标，然后点上面的下拉箭头，选择添加配置，VS Code会自动为我们创建启动配置，我们只要修改mainClass就好了，配置示例如下： { // 使用 IntelliSense 了解相关属性。 // 悬停以查看现有属性的描述。 // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387 &quot;version&quot;: &quot;0.2.0&quot;, &quot;configurations&quot;: [ { &quot;type&quot;: &quot;java&quot;, &quot;name&quot;: &quot;CodeLens (Launch) - DemoApplication&quot;, &quot;request&quot;: &quot;launch&quot;, &quot;mainClass&quot;: &quot;com.example.demo.DemoApplication&quot;, &quot;projectName&quot;: &quot;demo&quot; } ] } 按F5或者点 DemoApplication.java 的 run 按钮启动，此时在命令行可知tomcat服务已经启动，端口号是8080，访问路径根目录为空。 在浏览器访问 http://localhost:8080提示如下错误： Whitelabel Error PageThis application has no explicit mapping for /error, so you are seeing this as a fallback. Mon Mar 30 19:41:47 CST 2020There was an unexpected error (type=Not Found, status=404).No message available 这说明我们的服务确实启动可用了，但是访问出这个错误，是因为我们没有定义服务器访问这个根路径对应的应答接口导致的。我们在 demo 包下面新建个 controller 包，然后新建个 HomeController.java 文件，内容如下： package com.example.demo.controller; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; @RestController public class HomeController { @RequestMapping(&quot;/&quot;) public String home(){ return &quot;你好，欢迎使用Visual Studio Code!&quot;; } } 此时等待 应用重启，再次访问 http://localhost:8080 你好，欢迎使用 Visual Studio Code! 写在最后欢迎使用 *Visual Studio Code *！ 参考文章 原文链接：https://blog.csdn.net/xiaocy66/java/article/details/82875770","categories":[],"tags":[{"name":"liunx","slug":"liunx","permalink":"https://blog.sharef.top/tags/liunx/"},{"name":"java","slug":"java","permalink":"https://blog.sharef.top/tags/java/"},{"name":"vscode","slug":"vscode","permalink":"https://blog.sharef.top/tags/vscode/"}]},{"title":"在 win 10 环境下 如何打造一套适合的开发环境之前端环境","slug":"how-to-build-node-env","date":"2020-02-20T16:00:00.000Z","updated":"2020-05-15T05:39:53.139Z","comments":true,"path":"2020/02/21/66b0ce80-95f9-11ea-926e-6f56d5e2c488/","link":"","permalink":"https://blog.sharef.top/2020/02/21/66b0ce80-95f9-11ea-926e-6f56d5e2c488/","excerpt":"前提 win10 专业版 如果安装的是 win10 企业版本呢，由于太纯净了，连应用商店都没有，我们需要自己去下载一下应用商店 开启 Linux 子系统服务 操作 步骤： 打开 控制面板 找到 程序 点击 启用或关闭 Windows 功能 在差不多倒数的几个，找到 适用于Linux 的 Windows 子系统 ，打勾，等待安装好后，重启电脑 安装 Linux 子系统 打开 应用商店，如果没有登陆，需要实现登录 一下 搜索 Linux 选择 Ubuntu 18.04 LTS 选择安装，如果下载速度较慢，可以打开传递优化 等待下载好后，直接启动就好，此处一般时间比较长，请耐心等待，开启后，设置自己的 用户名 和 密码 启动配置 Ubuntu 这里可以根据自身来配置一些东西，比如替换镜像为国内阿里源，具体的配置还需要，自己去查就好， 如果要使用 root 权限，直接使用 sudo + commend 就好 安装编辑器这里可选择 vscode 为例，因为 vsCode 有现成的插件可以很好的在 wsl 中调试代码、共享文件","text":"前提 win10 专业版 如果安装的是 win10 企业版本呢，由于太纯净了，连应用商店都没有，我们需要自己去下载一下应用商店 开启 Linux 子系统服务 操作 步骤： 打开 控制面板 找到 程序 点击 启用或关闭 Windows 功能 在差不多倒数的几个，找到 适用于Linux 的 Windows 子系统 ，打勾，等待安装好后，重启电脑 安装 Linux 子系统 打开 应用商店，如果没有登陆，需要实现登录 一下 搜索 Linux 选择 Ubuntu 18.04 LTS 选择安装，如果下载速度较慢，可以打开传递优化 等待下载好后，直接启动就好，此处一般时间比较长，请耐心等待，开启后，设置自己的 用户名 和 密码 启动配置 Ubuntu 这里可以根据自身来配置一些东西，比如替换镜像为国内阿里源，具体的配置还需要，自己去查就好， 如果要使用 root 权限，直接使用 sudo + commend 就好 安装编辑器这里可选择 vscode 为例，因为 vsCode 有现成的插件可以很好的在 wsl 中调试代码、共享文件 下载地址：https://code.visualstudio.com/docs/?dv=win 安装插件： 直接搜索 @idms-vscode-remote.remote-wsl 安装，关于更多 wsl 在 vs 中使用，可参考 https://aka.ms/vscode-remote/wsl/getting-started 其他的插件可根据自身去 下载、安装，比如 中文包、主题、图标等 重启编辑器 在 ubuntu 中安装 开发环境此处以安装 nodejs 为例，打开 vscode 编辑器，按 ctrl + ` 打开终端，此时发现还是 win10 的命令行，我们可以点击左侧边栏的 远程资源管理器，进入到 wsl 列表中，选中我们刚刚安装的 ubuntu18.04 ，此时会重新开一个窗口，这时我们在 打开终端，我们会发现已经进入到我们的 Linux 系统了。 安装 nodejs 所有命令以及操作如下： // 获取最新的node二进制包 $ wegt https://npm.taobao.org/mirrors/node/v12.16.1/node-v12.16.1-linux-x64.tar.xz // 解压node包 $ tar -xvf node-v12.16.1-linux-x64.tar.xz // 建立 nodejs 文件夹 并将解压好的移入 nodejs 文件夹 $ cd /usr/local/ $ sudo mkdir -p soft/nodejs // 不要一味的赋值，看清自己下载的版本 $ sudo mv ~/node-v12.16.1-linux-x64/* ./nodejs/ // 建立软连接 $ sudo ln -s /usr/local/soft/nodejs/bin/node /usr/local/bin/node $ sudo ln -s /usr/local/soft/nodejs/bin/npm /usr/local/bin/npm $ sudo ln -s /usr/local/soft/nodejs/bin/npx /usr/local/bin/npx // 测试安装成功与否,如果打印出版本信息，则安装成功，如果没有，则应细细检查步骤，重复一下 $ npm -v // v12.16.1 $ node -v // 6.13.4 $ npx -v // 6.13.4 // 如果在生产服务器上，可以用ftp上传 // 注意，如果在生产服务器上安装时，最好是建立一个node的用户，方便管理，由于是本地开发我们就可以随自己喜好了 测试刚刚搭建好的开发环境在 win10 中，新建一个项目文件夹，右键用 vscode 打开，在左下角点击绿色的双对箭头(&gt;&lt;)图标,选择 Reopen Folder in WSL，按 ctrl + ` 进入命令行，如下： ****@***:/mnt/c/project$ 由路径可一看出来，我们的工程目录已经自动挂载到Linux系统重量。 打开 linux 子系统的文件\\\\wsl$\\Ubuntu-18.04\\home\\ 此时请享受，在linxu环境下，带来的畅快体验，可以避免大量由于Windows的原因导致的坑点。 写在最后请认真反复","categories":[{"name":"linux","slug":"linux","permalink":"https://blog.sharef.top/categories/linux/"},{"name":"前端","slug":"前端","permalink":"https://blog.sharef.top/categories/%E5%89%8D%E7%AB%AF/"},{"name":"环境搭建","slug":"环境搭建","permalink":"https://blog.sharef.top/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"liunx","slug":"liunx","permalink":"https://blog.sharef.top/tags/liunx/"},{"name":"node","slug":"node","permalink":"https://blog.sharef.top/tags/node/"}]}],"categories":[{"name":"linux","slug":"linux","permalink":"https://blog.sharef.top/categories/linux/"},{"name":"前端","slug":"前端","permalink":"https://blog.sharef.top/categories/%E5%89%8D%E7%AB%AF/"},{"name":"环境搭建","slug":"环境搭建","permalink":"https://blog.sharef.top/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"liunx","slug":"liunx","permalink":"https://blog.sharef.top/tags/liunx/"},{"name":"java","slug":"java","permalink":"https://blog.sharef.top/tags/java/"},{"name":"vscode","slug":"vscode","permalink":"https://blog.sharef.top/tags/vscode/"},{"name":"node","slug":"node","permalink":"https://blog.sharef.top/tags/node/"}]}